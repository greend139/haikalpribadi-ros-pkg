"""autogenerated by genmsg_py from ADC.msg. Do not edit."""
import roslib.message
import struct


class ADC(roslib.message.Message):
  _md5sum = "5007bc3b23ea814869e7acca4b5c929c"
  _type = "parallax_eddie_robot/ADC"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string status
int16 value1
int16 value2
int16 value3
int16 value4
int16 value5
int16 value6
int16 value7
int16 value8

"""
  __slots__ = ['status','value1','value2','value3','value4','value5','value6','value7','value8']
  _slot_types = ['string','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       status,value1,value2,value3,value4,value5,value6,value7,value8
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ADC, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = ''
      if self.value1 is None:
        self.value1 = 0
      if self.value2 is None:
        self.value2 = 0
      if self.value3 is None:
        self.value3 = 0
      if self.value4 is None:
        self.value4 = 0
      if self.value5 is None:
        self.value5 = 0
      if self.value6 is None:
        self.value6 = 0
      if self.value7 is None:
        self.value7 = 0
      if self.value8 is None:
        self.value8 = 0
    else:
      self.status = ''
      self.value1 = 0
      self.value2 = 0
      self.value3 = 0
      self.value4 = 0
      self.value5 = 0
      self.value6 = 0
      self.value7 = 0
      self.value8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.status
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8h.pack(_x.value1, _x.value2, _x.value3, _x.value4, _x.value5, _x.value6, _x.value7, _x.value8))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value1, _x.value2, _x.value3, _x.value4, _x.value5, _x.value6, _x.value7, _x.value8,) = _struct_8h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.status
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8h.pack(_x.value1, _x.value2, _x.value3, _x.value4, _x.value5, _x.value6, _x.value7, _x.value8))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value1, _x.value2, _x.value3, _x.value4, _x.value5, _x.value6, _x.value7, _x.value8,) = _struct_8h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8h = struct.Struct("<8h")
